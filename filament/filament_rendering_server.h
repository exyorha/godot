#ifndef FILAMENT_RENDERING_SERVER_H
#define FILAMENT_RENDERING_SERVER_H

#include "servers/rendering_server.h"

#include "filament_rendering_server_backend.h"
#include "threaded_execution_queue.h"

class FilamentDisplayServerContext;

class FilamentRenderingServer final : public RenderingServer, protected ThreadedExecutionQueue<FilamentRenderingServerBackend> {
public:
	FilamentRenderingServer();
	~FilamentRenderingServer() override;

	// RenderingServer API
	RID texture_2d_create(const Ref<Image> & p_image)  override;
	RID texture_2d_layered_create(const Vector<Ref<Image>> & p_layers, TextureLayeredType p_layered_type)  override;
	RID texture_3d_create(Image::Format anonarg, int p_width, int p_height, int p_depth, bool p_mipmaps, const Vector<Ref<Image>> & p_data)  override;
	RID texture_proxy_create(RID p_base)  override;
	void texture_2d_update(RID p_texture, const Ref<Image> & p_image, int p_layer)  override;
	void texture_3d_update(RID p_texture, const Vector<Ref<Image>> & p_data)  override;
	void texture_proxy_update(RID p_texture, RID p_proxy_to)  override;
	RID texture_2d_placeholder_create()  override;
	RID texture_2d_layered_placeholder_create(TextureLayeredType p_layered_type)  override;
	RID texture_3d_placeholder_create()  override;
	Ref<Image> texture_2d_get(RID p_texture) const override;
	Ref<Image> texture_2d_layer_get(RID p_texture, int p_layer) const override;
	Vector<Ref<Image>> texture_3d_get(RID p_texture) const override;
	void texture_replace(RID p_texture, RID p_by_texture)  override;
	void texture_set_size_override(RID p_texture, int p_width, int p_height)  override;
	void texture_set_path(RID p_texture, const String & p_path)  override;
	String texture_get_path(RID p_texture) const override;
	Image::Format texture_get_format(RID p_texture) const override;
	void texture_set_detect_3d_callback(RID p_texture, TextureDetectCallback p_callback, void * p_userdata)  override;
	void texture_set_detect_normal_callback(RID p_texture, TextureDetectCallback p_callback, void * p_userdata)  override;
	void texture_set_detect_roughness_callback(RID p_texture, TextureDetectRoughnessCallback p_callback, void * p_userdata)  override;
	void texture_debug_usage(List<TextureInfo> * r_info)  override;
	void texture_set_force_redraw_if_visible(RID p_texture, bool p_enable)  override;
	RID texture_rd_create(const RID & p_rd_texture, const RenderingServer::TextureLayeredType p_layer_type)  override;
	RID texture_get_rd_texture(RID p_texture, bool p_srgb) const override;
	uint64_t texture_get_native_handle(RID p_texture, bool p_srgb) const override;
	RID shader_create()  override;
	void shader_set_code(RID p_shader, const String & p_code)  override;
	void shader_set_path_hint(RID p_shader, const String & p_path)  override;
	String shader_get_code(RID p_shader) const override;
	void get_shader_parameter_list(RID p_shader, List<PropertyInfo> * p_param_list) const override;
	Variant shader_get_parameter_default(RID p_shader, const StringName & p_param) const override;
	void shader_set_default_texture_parameter(RID p_shader, const StringName & p_name, RID p_texture, int p_index)  override;
	RID shader_get_default_texture_parameter(RID p_shader, const StringName & p_name, int p_index) const override;
	ShaderNativeSourceCode shader_get_native_source_code(RID p_shader) const override;
	RID material_create()  override;
	void material_set_shader(RID p_shader_material, RID p_shader)  override;
	void material_set_param(RID p_material, const StringName & p_param, const Variant & p_value)  override;
	Variant material_get_param(RID p_material, const StringName & p_param) const override;
	void material_set_render_priority(RID p_material, int priority)  override;
	void material_set_next_pass(RID p_material, RID p_next_material)  override;
	RID mesh_create_from_surfaces(const Vector<SurfaceData> & p_surfaces, int p_blend_shape_count)  override;
	RID mesh_create()  override;
	void mesh_set_blend_shape_count(RID p_mesh, int p_blend_shape_count)  override;
	void mesh_add_surface(RID p_mesh, const SurfaceData & p_surface)  override;
	int mesh_get_blend_shape_count(RID p_mesh) const override;
	void mesh_set_blend_shape_mode(RID p_mesh, BlendShapeMode p_mode)  override;
	BlendShapeMode mesh_get_blend_shape_mode(RID p_mesh) const override;
	void mesh_surface_update_vertex_region(RID p_mesh, int p_surface, int p_offset, const Vector<uint8_t> & p_data)  override;
	void mesh_surface_update_attribute_region(RID p_mesh, int p_surface, int p_offset, const Vector<uint8_t> & p_data)  override;
	void mesh_surface_update_skin_region(RID p_mesh, int p_surface, int p_offset, const Vector<uint8_t> & p_data)  override;
	void mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material)  override;
	RID mesh_surface_get_material(RID p_mesh, int p_surface) const override;
	SurfaceData mesh_get_surface(RID p_mesh, int p_surface) const override;
	int mesh_get_surface_count(RID p_mesh) const override;
	void mesh_set_custom_aabb(RID p_mesh, const AABB & p_aabb)  override;
	AABB mesh_get_custom_aabb(RID p_mesh) const override;
	void mesh_set_shadow_mesh(RID p_mesh, RID p_shadow_mesh)  override;
	void mesh_clear(RID p_mesh)  override;
	RID multimesh_create()  override;
	void multimesh_allocate_data(RID p_multimesh, int p_instances, MultimeshTransformFormat p_transform_format, bool p_use_colors, bool p_use_custom_data)  override;
	int multimesh_get_instance_count(RID p_multimesh) const override;
	void multimesh_set_mesh(RID p_multimesh, RID p_mesh)  override;
	void multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform3D & p_transform)  override;
	void multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D & p_transform)  override;
	void multimesh_instance_set_color(RID p_multimesh, int p_index, const Color & p_color)  override;
	void multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color & p_color)  override;
	RID multimesh_get_mesh(RID p_multimesh) const override;
	AABB multimesh_get_aabb(RID p_multimesh) const override;
	Transform3D multimesh_instance_get_transform(RID p_multimesh, int p_index) const override;
	Transform2D multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const override;
	Color multimesh_instance_get_color(RID p_multimesh, int p_index) const override;
	Color multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const override;
	void multimesh_set_buffer(RID p_multimesh, const Vector<float> & p_buffer)  override;
	Vector<float> multimesh_get_buffer(RID p_multimesh) const override;
	void multimesh_set_visible_instances(RID p_multimesh, int p_visible)  override;
	int multimesh_get_visible_instances(RID p_multimesh) const override;
	RID skeleton_create()  override;
	void skeleton_allocate_data(RID p_skeleton, int p_bones, bool p_2d_skeleton)  override;
	int skeleton_get_bone_count(RID p_skeleton) const override;
	void skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform3D & p_transform)  override;
	Transform3D skeleton_bone_get_transform(RID p_skeleton, int p_bone) const override;
	void skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D & p_transform)  override;
	Transform2D skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const override;
	void skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D & p_base_transform)  override;
	RID directional_light_create()  override;
	RID omni_light_create()  override;
	RID spot_light_create()  override;
	void light_set_color(RID p_light, const Color & p_color)  override;
	void light_set_param(RID p_light, LightParam p_param, float p_value)  override;
	void light_set_shadow(RID p_light, bool p_enabled)  override;
	void light_set_projector(RID p_light, RID p_texture)  override;
	void light_set_negative(RID p_light, bool p_enable)  override;
	void light_set_cull_mask(RID p_light, uint32_t p_mask)  override;
	void light_set_distance_fade(RID p_light, bool p_enabled, float p_begin, float p_shadow, float p_length)  override;
	void light_set_reverse_cull_face_mode(RID p_light, bool p_enabled)  override;
	void light_set_bake_mode(RID p_light, LightBakeMode p_bake_mode)  override;
	void light_set_max_sdfgi_cascade(RID p_light, uint32_t p_cascade)  override;
	void light_omni_set_shadow_mode(RID p_light, LightOmniShadowMode p_mode)  override;
	void light_directional_set_shadow_mode(RID p_light, LightDirectionalShadowMode p_mode)  override;
	void light_directional_set_blend_splits(RID p_light, bool p_enable)  override;
	void light_directional_set_sky_mode(RID p_light, LightDirectionalSkyMode p_mode)  override;
	RID shadow_atlas_create()  override;
	void shadow_atlas_set_size(RID p_atlas, int p_size, bool p_use_16_bits)  override;
	void shadow_atlas_set_quadrant_subdivision(RID p_atlas, int p_quadrant, int p_subdivision)  override;
	void directional_shadow_atlas_set_size(int p_size, bool p_16_bits)  override;
	void positional_soft_shadow_filter_set_quality(ShadowQuality p_quality)  override;
	void directional_soft_shadow_filter_set_quality(ShadowQuality p_quality)  override;
	void light_projectors_set_filter(LightProjectorFilter p_filter)  override;
	RID reflection_probe_create()  override;
	void reflection_probe_set_update_mode(RID p_probe, ReflectionProbeUpdateMode p_mode)  override;
	void reflection_probe_set_intensity(RID p_probe, float p_intensity)  override;
	void reflection_probe_set_ambient_mode(RID p_probe, ReflectionProbeAmbientMode p_mode)  override;
	void reflection_probe_set_ambient_color(RID p_probe, const Color & p_color)  override;
	void reflection_probe_set_ambient_energy(RID p_probe, float p_energy)  override;
	void reflection_probe_set_max_distance(RID p_probe, float p_distance)  override;
	void reflection_probe_set_size(RID p_probe, const Vector3 & p_size)  override;
	void reflection_probe_set_origin_offset(RID p_probe, const Vector3 & p_offset)  override;
	void reflection_probe_set_as_interior(RID p_probe, bool p_enable)  override;
	void reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable)  override;
	void reflection_probe_set_enable_shadows(RID p_probe, bool p_enable)  override;
	void reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers)  override;
	void reflection_probe_set_resolution(RID p_probe, int p_resolution)  override;
	void reflection_probe_set_mesh_lod_threshold(RID p_probe, float p_pixels)  override;
	RID decal_create()  override;
	void decal_set_size(RID p_decal, const Vector3 & p_size)  override;
	void decal_set_texture(RID p_decal, DecalTexture p_type, RID p_texture)  override;
	void decal_set_emission_energy(RID p_decal, float p_energy)  override;
	void decal_set_albedo_mix(RID p_decal, float p_mix)  override;
	void decal_set_modulate(RID p_decal, const Color & p_modulate)  override;
	void decal_set_cull_mask(RID p_decal, uint32_t p_layers)  override;
	void decal_set_distance_fade(RID p_decal, bool p_enabled, float p_begin, float p_length)  override;
	void decal_set_fade(RID p_decal, float p_above, float p_below)  override;
	void decal_set_normal_fade(RID p_decal, float p_fade)  override;
	void decals_set_filter(DecalFilter p_quality)  override;
	RID voxel_gi_create()  override;
	void voxel_gi_allocate_data(RID p_voxel_gi, const Transform3D & p_to_cell_xform, const AABB & p_aabb, const Vector3i & p_octree_size, const Vector<uint8_t> & p_octree_cells, const Vector<uint8_t> & p_data_cells, const Vector<uint8_t> & p_distance_field, const Vector<int> & p_level_counts)  override;
	AABB voxel_gi_get_bounds(RID p_voxel_gi) const override;
	Vector3i voxel_gi_get_octree_size(RID p_voxel_gi) const override;
	Vector<uint8_t> voxel_gi_get_octree_cells(RID p_voxel_gi) const override;
	Vector<uint8_t> voxel_gi_get_data_cells(RID p_voxel_gi) const override;
	Vector<uint8_t> voxel_gi_get_distance_field(RID p_voxel_gi) const override;
	Vector<int> voxel_gi_get_level_counts(RID p_voxel_gi) const override;
	Transform3D voxel_gi_get_to_cell_xform(RID p_voxel_gi) const override;
	void voxel_gi_set_dynamic_range(RID p_voxel_gi, float p_range)  override;
	void voxel_gi_set_propagation(RID p_voxel_gi, float p_range)  override;
	void voxel_gi_set_energy(RID p_voxel_gi, float p_energy)  override;
	void voxel_gi_set_baked_exposure_normalization(RID p_voxel_gi, float p_baked_exposure)  override;
	void voxel_gi_set_bias(RID p_voxel_gi, float p_bias)  override;
	void voxel_gi_set_normal_bias(RID p_voxel_gi, float p_range)  override;
	void voxel_gi_set_interior(RID p_voxel_gi, bool p_enable)  override;
	void voxel_gi_set_use_two_bounces(RID p_voxel_gi, bool p_enable)  override;
	void voxel_gi_set_quality(VoxelGIQuality anonarg)  override;
	void sdfgi_reset()  override;
	RID lightmap_create()  override;
	void lightmap_set_textures(RID p_lightmap, RID p_light, bool p_uses_spherical_haromics)  override;
	void lightmap_set_probe_bounds(RID p_lightmap, const AABB & p_bounds)  override;
	void lightmap_set_probe_interior(RID p_lightmap, bool p_interior)  override;
	void lightmap_set_probe_capture_data(RID p_lightmap, const PackedVector3Array & p_points, const PackedColorArray & p_point_sh, const PackedInt32Array & p_tetrahedra, const PackedInt32Array & p_bsp_tree)  override;
	void lightmap_set_baked_exposure_normalization(RID p_lightmap, float p_exposure)  override;
	PackedVector3Array lightmap_get_probe_capture_points(RID p_lightmap) const override;
	PackedColorArray lightmap_get_probe_capture_sh(RID p_lightmap) const override;
	PackedInt32Array lightmap_get_probe_capture_tetrahedra(RID p_lightmap) const override;
	PackedInt32Array lightmap_get_probe_capture_bsp_tree(RID p_lightmap) const override;
	void lightmap_set_probe_capture_update_speed(float p_speed)  override;
	RID particles_create()  override;
	void particles_set_mode(RID p_particles, ParticlesMode p_mode)  override;
	void particles_set_emitting(RID p_particles, bool p_enable)  override;
	bool particles_get_emitting(RID p_particles)  override;
	void particles_set_amount(RID p_particles, int p_amount)  override;
	void particles_set_amount_ratio(RID p_particles, float p_amount_ratio)  override;
	void particles_set_lifetime(RID p_particles, double p_lifetime)  override;
	void particles_set_one_shot(RID p_particles, bool p_one_shot)  override;
	void particles_set_pre_process_time(RID p_particles, double p_time)  override;
	void particles_set_explosiveness_ratio(RID p_particles, float p_ratio)  override;
	void particles_set_randomness_ratio(RID p_particles, float p_ratio)  override;
	void particles_set_custom_aabb(RID p_particles, const AABB & p_aabb)  override;
	void particles_set_speed_scale(RID p_particles, double p_scale)  override;
	void particles_set_use_local_coordinates(RID p_particles, bool p_enable)  override;
	void particles_set_process_material(RID p_particles, RID p_material)  override;
	void particles_set_fixed_fps(RID p_particles, int p_fps)  override;
	void particles_set_interpolate(RID p_particles, bool p_enable)  override;
	void particles_set_fractional_delta(RID p_particles, bool p_enable)  override;
	void particles_set_collision_base_size(RID p_particles, float p_size)  override;
	void particles_set_transform_align(RID p_particles, ParticlesTransformAlign p_transform_align)  override;
	void particles_set_trails(RID p_particles, bool p_enable, float p_length_sec)  override;
	void particles_set_trail_bind_poses(RID p_particles, const Vector<Transform3D> & p_bind_poses)  override;
	bool particles_is_inactive(RID p_particles)  override;
	void particles_request_process(RID p_particles)  override;
	void particles_restart(RID p_particles)  override;
	void particles_set_subemitter(RID p_particles, RID p_subemitter_particles)  override;
	void particles_emit(RID p_particles, const Transform3D & p_transform, const Vector3 & p_velocity, const Color & p_color, const Color & p_custom, uint32_t p_emit_flags)  override;
	void particles_set_draw_order(RID p_particles, ParticlesDrawOrder p_order)  override;
	void particles_set_draw_passes(RID p_particles, int p_count)  override;
	void particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh)  override;
	AABB particles_get_current_aabb(RID p_particles)  override;
	void particles_set_emission_transform(RID p_particles, const Transform3D & p_transform)  override;
	void particles_set_emitter_velocity(RID p_particles, const Vector3 & p_velocity)  override;
	void particles_set_interp_to_end(RID p_particles, float p_interp)  override;
	RID particles_collision_create()  override;
	void particles_collision_set_collision_type(RID p_particles_collision, ParticlesCollisionType p_type)  override;
	void particles_collision_set_cull_mask(RID p_particles_collision, uint32_t p_cull_mask)  override;
	void particles_collision_set_sphere_radius(RID p_particles_collision, real_t p_radius)  override;
	void particles_collision_set_box_extents(RID p_particles_collision, const Vector3 & p_extents)  override;
	void particles_collision_set_attractor_strength(RID p_particles_collision, real_t p_strength)  override;
	void particles_collision_set_attractor_directionality(RID p_particles_collision, real_t p_directionality)  override;
	void particles_collision_set_attractor_attenuation(RID p_particles_collision, real_t p_curve)  override;
	void particles_collision_set_field_texture(RID p_particles_collision, RID p_texture)  override;
	void particles_collision_height_field_update(RID p_particles_collision)  override;
	void particles_collision_set_height_field_resolution(RID p_particles_collision, ParticlesCollisionHeightfieldResolution p_resolution)  override;
	RID fog_volume_create()  override;
	void fog_volume_set_shape(RID p_fog_volume, FogVolumeShape p_shape)  override;
	void fog_volume_set_size(RID p_fog_volume, const Vector3 & p_size)  override;
	void fog_volume_set_material(RID p_fog_volume, RID p_material)  override;
	RID visibility_notifier_create()  override;
	void visibility_notifier_set_aabb(RID p_notifier, const AABB & p_aabb)  override;
	void visibility_notifier_set_callbacks(RID p_notifier, const Callable & p_enter_callbable, const Callable & p_exit_callable)  override;
	RID occluder_create()  override;
	void occluder_set_mesh(RID p_occluder, const PackedVector3Array & p_vertices, const PackedInt32Array & p_indices)  override;
	RID camera_create()  override;
	void camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far)  override;
	void camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far)  override;
	void camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far)  override;
	void camera_set_transform(RID p_camera, const Transform3D & p_transform)  override;
	void camera_set_cull_mask(RID p_camera, uint32_t p_layers)  override;
	void camera_set_environment(RID p_camera, RID p_env)  override;
	void camera_set_camera_attributes(RID p_camera, RID p_camera_attributes)  override;
	void camera_set_use_vertical_aspect(RID p_camera, bool p_enable)  override;
	RID viewport_create()  override;
	void viewport_set_use_xr(RID p_viewport, bool p_use_xr)  override;
	void viewport_set_size(RID p_viewport, int p_width, int p_height)  override;
	void viewport_set_active(RID p_viewport, bool p_active)  override;
	void viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport)  override;
	void viewport_set_canvas_cull_mask(RID p_viewport, uint32_t p_canvas_cull_mask)  override;
	void viewport_attach_to_screen(RID p_viewport, const Rect2 & p_rect, DisplayServer::WindowID p_screen)  override;
	void viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable)  override;
	void viewport_set_scaling_3d_mode(RID p_viewport, ViewportScaling3DMode p_scaling_3d_mode)  override;
	void viewport_set_scaling_3d_scale(RID p_viewport, float p_scaling_3d_scale)  override;
	void viewport_set_fsr_sharpness(RID p_viewport, float p_fsr_sharpness)  override;
	void viewport_set_texture_mipmap_bias(RID p_viewport, float p_texture_mipmap_bias)  override;
	void viewport_set_update_mode(RID p_viewport, ViewportUpdateMode p_mode)  override;
	void viewport_set_clear_mode(RID p_viewport, ViewportClearMode p_clear_mode)  override;
	RID viewport_get_render_target(RID p_viewport) const override;
	RID viewport_get_texture(RID p_viewport) const override;
	void viewport_set_environment_mode(RID p_viewport, ViewportEnvironmentMode p_mode)  override;
	void viewport_set_disable_3d(RID p_viewport, bool p_disable)  override;
	void viewport_set_disable_2d(RID p_viewport, bool p_disable)  override;
	void viewport_attach_camera(RID p_viewport, RID p_camera)  override;
	void viewport_set_scenario(RID p_viewport, RID p_scenario)  override;
	void viewport_attach_canvas(RID p_viewport, RID p_canvas)  override;
	void viewport_remove_canvas(RID p_viewport, RID p_canvas)  override;
	void viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D & p_offset)  override;
	void viewport_set_transparent_background(RID p_viewport, bool p_enabled)  override;
	void viewport_set_use_hdr_2d(RID p_viewport, bool p_use_hdr)  override;
	void viewport_set_snap_2d_transforms_to_pixel(RID p_viewport, bool p_enabled)  override;
	void viewport_set_snap_2d_vertices_to_pixel(RID p_viewport, bool p_enabled)  override;
	void viewport_set_default_canvas_item_texture_filter(RID p_viewport, CanvasItemTextureFilter p_filter)  override;
	void viewport_set_default_canvas_item_texture_repeat(RID p_viewport, CanvasItemTextureRepeat p_repeat)  override;
	void viewport_set_global_canvas_transform(RID p_viewport, const Transform2D & p_transform)  override;
	void viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer)  override;
	void viewport_set_sdf_oversize_and_scale(RID p_viewport, ViewportSDFOversize p_oversize, ViewportSDFScale p_scale)  override;
	void viewport_set_positional_shadow_atlas_size(RID p_viewport, int p_size, bool p_16_bits)  override;
	void viewport_set_positional_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv)  override;
	void viewport_set_msaa_3d(RID p_viewport, ViewportMSAA p_msaa)  override;
	void viewport_set_msaa_2d(RID p_viewport, ViewportMSAA p_msaa)  override;
	void viewport_set_screen_space_aa(RID p_viewport, ViewportScreenSpaceAA p_mode)  override;
	void viewport_set_use_taa(RID p_viewport, bool p_use_taa)  override;
	void viewport_set_use_debanding(RID p_viewport, bool p_use_debanding)  override;
	void viewport_set_mesh_lod_threshold(RID p_viewport, float p_pixels)  override;
	void viewport_set_use_occlusion_culling(RID p_viewport, bool p_use_occlusion_culling)  override;
	void viewport_set_occlusion_rays_per_thread(int p_rays_per_thread)  override;
	void viewport_set_occlusion_culling_build_quality(ViewportOcclusionCullingBuildQuality p_quality)  override;
	int viewport_get_render_info(RID p_viewport, ViewportRenderInfoType p_type, ViewportRenderInfo p_info)  override;
	void viewport_set_debug_draw(RID p_viewport, ViewportDebugDraw p_draw)  override;
	void viewport_set_measure_render_time(RID p_viewport, bool p_enable)  override;
	double viewport_get_measured_render_time_cpu(RID p_viewport) const override;
	double viewport_get_measured_render_time_gpu(RID p_viewport) const override;
	RID viewport_find_from_screen_attachment(DisplayServer::WindowID p_id) const override;
	void viewport_set_vrs_mode(RID p_viewport, ViewportVRSMode p_mode)  override;
	void viewport_set_vrs_texture(RID p_viewport, RID p_texture)  override;
	RID sky_create()  override;
	void sky_set_radiance_size(RID p_sky, int p_radiance_size)  override;
	void sky_set_mode(RID p_sky, SkyMode p_mode)  override;
	void sky_set_material(RID p_sky, RID p_material)  override;
	Ref<Image> sky_bake_panorama(RID p_sky, float p_energy, bool p_bake_irradiance, const Size2i & p_size)  override;
	RID environment_create()  override;
	void environment_set_background(RID p_env, EnvironmentBG p_bg)  override;
	void environment_set_sky(RID p_env, RID p_sky)  override;
	void environment_set_sky_custom_fov(RID p_env, float p_scale)  override;
	void environment_set_sky_orientation(RID p_env, const Basis & p_orientation)  override;
	void environment_set_bg_color(RID p_env, const Color & p_color)  override;
	void environment_set_bg_energy(RID p_env, float p_multiplier, float p_exposure_value)  override;
	void environment_set_canvas_max_layer(RID p_env, int p_max_layer)  override;
	void environment_set_ambient_light(RID p_env, const Color & p_color, EnvironmentAmbientSource p_ambient, float p_energy, float p_sky_contribution, EnvironmentReflectionSource p_reflection_source)  override;
	void environment_set_glow(RID p_env, bool p_enable, Vector<float> p_levels, float p_intensity, float p_strength, float p_mix, float p_bloom_threshold, EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, float p_glow_map_strength, RID p_glow_map)  override;
	void environment_glow_set_use_bicubic_upscale(bool p_enable)  override;
	void environment_set_tonemap(RID p_env, EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white)  override;
	void environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, bool p_use_1d_color_correction, RID p_color_correction)  override;
	void environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance)  override;
	void environment_set_ssr_roughness_quality(EnvironmentSSRRoughnessQuality p_quality)  override;
	void environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_power, float p_detail, float p_horizon, float p_sharpness, float p_light_affect, float p_ao_channel_affect)  override;
	void environment_set_ssao_quality(EnvironmentSSAOQuality p_quality, bool p_half_size, float p_adaptive_target, int p_blur_passes, float p_fadeout_from, float p_fadeout_to)  override;
	void environment_set_ssil(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_sharpness, float p_normal_rejection)  override;
	void environment_set_ssil_quality(EnvironmentSSILQuality p_quality, bool p_half_size, float p_adaptive_target, int p_blur_passes, float p_fadeout_from, float p_fadeout_to)  override;
	void environment_set_sdfgi(RID p_env, bool p_enable, int p_cascades, float p_min_cell_size, EnvironmentSDFGIYScale p_y_scale, bool p_use_occlusion, float p_bounce_feedback, bool p_read_sky, float p_energy, float p_normal_bias, float p_probe_bias)  override;
	void environment_set_sdfgi_ray_count(EnvironmentSDFGIRayCount p_ray_count)  override;
	void environment_set_sdfgi_frames_to_converge(EnvironmentSDFGIFramesToConverge p_frames)  override;
	void environment_set_sdfgi_frames_to_update_light(EnvironmentSDFGIFramesToUpdateLight p_update)  override;
	void environment_set_fog(RID p_env, bool p_enable, const Color & p_light_color, float p_light_energy, float p_sun_scatter, float p_density, float p_height, float p_height_density, float p_aerial_perspective, float p_sky_affect)  override;
	void environment_set_volumetric_fog(RID p_env, bool p_enable, float p_density, const Color & p_albedo, const Color & p_emission, float p_emission_energy, float p_anisotropy, float p_length, float p_detail_spread, float p_gi_inject, bool p_temporal_reprojection, float p_temporal_reprojection_amount, float p_ambient_inject, float p_sky_affect)  override;
	void environment_set_volumetric_fog_volume_size(int p_size, int p_depth)  override;
	void environment_set_volumetric_fog_filter_active(bool p_enable)  override;
	Ref<Image> environment_bake_panorama(RID p_env, bool p_bake_irradiance, const Size2i & p_size)  override;
	void screen_space_roughness_limiter_set_active(bool p_enable, float p_amount, float p_limit)  override;
	void sub_surface_scattering_set_quality(SubSurfaceScatteringQuality p_quality)  override;
	void sub_surface_scattering_set_scale(float p_scale, float p_depth_scale)  override;
	RID camera_attributes_create()  override;
	void camera_attributes_set_dof_blur_quality(DOFBlurQuality p_quality, bool p_use_jitter)  override;
	void camera_attributes_set_dof_blur_bokeh_shape(DOFBokehShape p_shape)  override;
	void camera_attributes_set_dof_blur(RID p_camera_attributes, bool p_far_enable, float p_far_distance, float p_far_transition, bool p_near_enable, float p_near_distance, float p_near_transition, float p_amount)  override;
	void camera_attributes_set_exposure(RID p_camera_attributes, float p_multiplier, float p_exposure_normalization)  override;
	void camera_attributes_set_auto_exposure(RID p_camera_attributes, bool p_enable, float p_min_sensitivity, float p_max_sensitivity, float p_speed, float p_scale)  override;
	RID scenario_create()  override;
	void scenario_set_environment(RID p_scenario, RID p_environment)  override;
	void scenario_set_fallback_environment(RID p_scenario, RID p_environment)  override;
	void scenario_set_camera_attributes(RID p_scenario, RID p_camera_attributes)  override;
	RID instance_create()  override;
	void instance_set_base(RID p_instance, RID p_base)  override;
	void instance_set_scenario(RID p_instance, RID p_scenario)  override;
	void instance_set_layer_mask(RID p_instance, uint32_t p_mask)  override;
	void instance_set_pivot_data(RID p_instance, float p_sorting_offset, bool p_use_aabb_center)  override;
	void instance_set_transform(RID p_instance, const Transform3D & p_transform)  override;
	void instance_attach_object_instance_id(RID p_instance, ObjectID p_id)  override;
	void instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight)  override;
	void instance_set_surface_override_material(RID p_instance, int p_surface, RID p_material)  override;
	void instance_set_visible(RID p_instance, bool p_visible)  override;
	void instance_set_custom_aabb(RID p_instance, AABB aabb)  override;
	void instance_attach_skeleton(RID p_instance, RID p_skeleton)  override;
	void instance_set_extra_visibility_margin(RID p_instance, real_t p_margin)  override;
	void instance_set_visibility_parent(RID p_instance, RID p_parent_instance)  override;
	void instance_set_ignore_culling(RID p_instance, bool p_enabled)  override;
	Vector<ObjectID> instances_cull_aabb(const AABB & p_aabb, RID p_scenario) const override;
	Vector<ObjectID> instances_cull_ray(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario) const override;
	Vector<ObjectID> instances_cull_convex(const Vector<Plane> & p_convex, RID p_scenario) const override;
	void instance_geometry_set_flag(RID p_instance, InstanceFlags p_flags, bool p_enabled)  override;
	void instance_geometry_set_cast_shadows_setting(RID p_instance, ShadowCastingSetting p_shadow_casting_setting)  override;
	void instance_geometry_set_material_override(RID p_instance, RID p_material)  override;
	void instance_geometry_set_material_overlay(RID p_instance, RID p_material)  override;
	void instance_geometry_set_visibility_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin, VisibilityRangeFadeMode p_fade_mode)  override;
	void instance_geometry_set_lightmap(RID p_instance, RID p_lightmap, const Rect2 & p_lightmap_uv_scale, int p_lightmap_slice)  override;
	void instance_geometry_set_lod_bias(RID p_instance, float p_lod_bias)  override;
	void instance_geometry_set_transparency(RID p_instance, float p_transparency)  override;
	void instance_geometry_set_shader_parameter(RID p_instance, const StringName & anonarg, const Variant & p_value)  override;
	Variant instance_geometry_get_shader_parameter(RID p_instance, const StringName & anonarg) const override;
	Variant instance_geometry_get_shader_parameter_default_value(RID p_instance, const StringName & anonarg) const override;
	void instance_geometry_get_shader_parameter_list(RID p_instance, List<PropertyInfo> * p_parameters) const override;
	TypedArray<Image> bake_render_uv2(RID p_base, const TypedArray<RID> & p_material_overrides, const Size2i & p_image_size)  override;
	RID canvas_create()  override;
	void canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 & p_mirroring)  override;
	void canvas_set_modulate(RID p_canvas, const Color & p_color)  override;
	void canvas_set_parent(RID p_canvas, RID p_parent, float p_scale)  override;
	void canvas_set_disable_scale(bool p_disable)  override;
	RID canvas_texture_create()  override;
	void canvas_texture_set_channel(RID p_canvas_texture, CanvasTextureChannel p_channel, RID p_texture)  override;
	void canvas_texture_set_shading_parameters(RID p_canvas_texture, const Color & p_base_color, float p_shininess)  override;
	void canvas_texture_set_texture_filter(RID p_canvas_texture, CanvasItemTextureFilter p_filter)  override;
	void canvas_texture_set_texture_repeat(RID p_canvas_texture, CanvasItemTextureRepeat p_repeat)  override;
	RID canvas_item_create()  override;
	void canvas_item_set_parent(RID p_item, RID p_parent)  override;
	void canvas_item_set_default_texture_filter(RID p_item, CanvasItemTextureFilter p_filter)  override;
	void canvas_item_set_default_texture_repeat(RID p_item, CanvasItemTextureRepeat p_repeat)  override;
	void canvas_item_set_visible(RID p_item, bool p_visible)  override;
	void canvas_item_set_light_mask(RID p_item, int p_mask)  override;
	void canvas_item_set_update_when_visible(RID p_item, bool p_update)  override;
	void canvas_item_set_transform(RID p_item, const Transform2D & p_transform)  override;
	void canvas_item_set_clip(RID p_item, bool p_clip)  override;
	void canvas_item_set_distance_field_mode(RID p_item, bool p_enable)  override;
	void canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 & p_rect)  override;
	void canvas_item_set_modulate(RID p_item, const Color & p_color)  override;
	void canvas_item_set_self_modulate(RID p_item, const Color & p_color)  override;
	void canvas_item_set_visibility_layer(RID p_item, uint32_t p_visibility_layer)  override;
	void canvas_item_set_draw_behind_parent(RID p_item, bool p_enable)  override;
	void canvas_item_add_line(RID p_item, const Point2 & p_from, const Point2 & p_to, const Color & p_color, float p_width, bool p_antialiased)  override;
	void canvas_item_add_polyline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width, bool p_antialiased)  override;
	void canvas_item_add_multiline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width)  override;
	void canvas_item_add_rect(RID p_item, const Rect2 & p_rect, const Color & p_color)  override;
	void canvas_item_add_circle(RID p_item, const Point2 & p_pos, float p_radius, const Color & p_color)  override;
	void canvas_item_add_texture_rect(RID p_item, const Rect2 & p_rect, RID p_texture, bool p_tile, const Color & p_modulate, bool p_transpose)  override;
	void canvas_item_add_texture_rect_region(RID p_item, const Rect2 & p_rect, RID p_texture, const Rect2 & p_src_rect, const Color & p_modulate, bool p_transpose, bool p_clip_uv)  override;
	void canvas_item_add_msdf_texture_rect_region(RID p_item, const Rect2 & p_rect, RID p_texture, const Rect2 & p_src_rect, const Color & p_modulate, int p_outline_size, float p_px_range, float p_scale)  override;
	void canvas_item_add_lcd_texture_rect_region(RID p_item, const Rect2 & p_rect, RID p_texture, const Rect2 & p_src_rect, const Color & p_modulate)  override;
	void canvas_item_add_nine_patch(RID p_item, const Rect2 & p_rect, const Rect2 & p_source, RID p_texture, const Vector2 & p_topleft, const Vector2 & p_bottomright, NinePatchAxisMode p_x_axis_mode, NinePatchAxisMode p_y_axis_mode, bool p_draw_center, const Color & p_modulate)  override;
	void canvas_item_add_primitive(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, RID p_texture)  override;
	void canvas_item_add_polygon(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, RID p_texture)  override;
	void canvas_item_add_triangle_array(RID p_item, const Vector<int> & p_indices, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, const Vector<int> & p_bones, const Vector<float> & p_weights, RID p_texture, int p_count)  override;
	void canvas_item_add_mesh(RID p_item, const RID & p_mesh, const Transform2D & p_transform, const Color & p_modulate, RID p_texture)  override;
	void canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture)  override;
	void canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture)  override;
	void canvas_item_add_set_transform(RID p_item, const Transform2D & p_transform)  override;
	void canvas_item_add_clip_ignore(RID p_item, bool p_ignore)  override;
	void canvas_item_add_animation_slice(RID p_item, double p_animation_length, double p_slice_begin, double p_slice_end, double p_offset)  override;
	void canvas_item_set_sort_children_by_y(RID p_item, bool p_enable)  override;
	void canvas_item_set_z_index(RID p_item, int p_z)  override;
	void canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable)  override;
	void canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 & p_rect)  override;
	void canvas_item_attach_skeleton(RID p_item, RID p_skeleton)  override;
	void canvas_item_clear(RID p_item)  override;
	void canvas_item_set_draw_index(RID p_item, int p_index)  override;
	void canvas_item_set_material(RID p_item, RID p_material)  override;
	void canvas_item_set_use_parent_material(RID p_item, bool p_enable)  override;
	void canvas_item_set_visibility_notifier(RID p_item, bool p_enable, const Rect2 & p_area, const Callable & p_enter_callbable, const Callable & p_exit_callable)  override;
	void canvas_item_set_canvas_group_mode(RID p_item, CanvasGroupMode p_mode, float p_clear_margin, bool p_fit_empty, float p_fit_margin, bool p_blur_mipmaps)  override;
	void canvas_item_set_debug_redraw(bool p_enabled)  override;
	bool canvas_item_get_debug_redraw() const override;
	RID canvas_light_create()  override;
	void canvas_light_set_mode(RID p_light, CanvasLightMode p_mode)  override;
	void canvas_light_attach_to_canvas(RID p_light, RID p_canvas)  override;
	void canvas_light_set_enabled(RID p_light, bool p_enabled)  override;
	void canvas_light_set_transform(RID p_light, const Transform2D & p_transform)  override;
	void canvas_light_set_color(RID p_light, const Color & p_color)  override;
	void canvas_light_set_height(RID p_light, float p_height)  override;
	void canvas_light_set_energy(RID p_light, float p_energy)  override;
	void canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z)  override;
	void canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer)  override;
	void canvas_light_set_item_cull_mask(RID p_light, int p_mask)  override;
	void canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask)  override;
	void canvas_light_set_directional_distance(RID p_light, float p_distance)  override;
	void canvas_light_set_texture_scale(RID p_light, float p_scale)  override;
	void canvas_light_set_texture(RID p_light, RID p_texture)  override;
	void canvas_light_set_texture_offset(RID p_light, const Vector2 & p_offset)  override;
	void canvas_light_set_blend_mode(RID p_light, CanvasLightBlendMode p_mode)  override;
	void canvas_light_set_shadow_enabled(RID p_light, bool p_enabled)  override;
	void canvas_light_set_shadow_filter(RID p_light, CanvasLightShadowFilter p_filter)  override;
	void canvas_light_set_shadow_color(RID p_light, const Color & p_color)  override;
	void canvas_light_set_shadow_smooth(RID p_light, float p_smooth)  override;
	RID canvas_light_occluder_create()  override;
	void canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas)  override;
	void canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled)  override;
	void canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon)  override;
	void canvas_light_occluder_set_as_sdf_collision(RID p_occluder, bool p_enable)  override;
	void canvas_light_occluder_set_transform(RID p_occluder, const Transform2D & p_xform)  override;
	void canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask)  override;
	RID canvas_occluder_polygon_create()  override;
	void canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const Vector<Vector2> & p_shape, bool p_closed)  override;
	void canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, CanvasOccluderPolygonCullMode p_mode)  override;
	void canvas_set_shadow_texture_size(int p_size)  override;
	void global_shader_parameter_add(const StringName & p_name, GlobalShaderParameterType p_type, const Variant & p_value)  override;
	void global_shader_parameter_remove(const StringName & p_name)  override;
	Vector<StringName> global_shader_parameter_get_list() const override;
	void global_shader_parameter_set(const StringName & p_name, const Variant & p_value)  override;
	void global_shader_parameter_set_override(const StringName & p_name, const Variant & p_value)  override;
	Variant global_shader_parameter_get(const StringName & p_name) const override;
	GlobalShaderParameterType global_shader_parameter_get_type(const StringName & p_name) const override;
	void global_shader_parameters_load_settings(bool p_load_textures)  override;
	void global_shader_parameters_clear()  override;
	void free(RID p_rid)  override;
	void request_frame_drawn_callback(const Callable & p_callable)  override;
	void draw(bool p_swap_buffers, double frame_step)  override;
	void sync()  override;
	bool has_changed() const override;
	void finish()  override;
	uint64_t get_rendering_info(RenderingInfo p_info)  override;
	String get_video_adapter_name() const override;
	String get_video_adapter_vendor() const override;
	RenderingDevice::DeviceType get_video_adapter_type() const override;
	String get_video_adapter_api_version() const override;
	void set_frame_profiling_enabled(bool p_enable)  override;
	Vector<FrameProfileArea> get_frame_profile()  override;
	uint64_t get_frame_profile_frame()  override;
	double get_frame_setup_time_cpu() const override;
	void gi_set_use_half_resolution(bool p_enable)  override;
	RID get_test_cube()  override;
	void sdfgi_set_debug_probe_select(const Vector3 & p_position, const Vector3 & p_dir)  override;
	void set_boot_image(const Ref<Image> & p_image, const Color & p_color, bool p_scale, bool p_use_filter)  override;
	Color get_default_clear_color()  override;
	void set_default_clear_color(const Color & p_color)  override;
	bool has_feature(Features p_feature) const override;
	bool has_os_feature(const String & p_feature) const override;
	void set_debug_generate_wireframes(bool p_generate)  override;
	void call_set_vsync_mode(DisplayServer::VSyncMode p_mode, DisplayServer::WindowID p_window)  override;
	bool is_low_end() const override;
	void set_print_gpu_profile(bool p_enable)  override;
	Size2i get_maximum_viewport_size() const override;
	void call_on_render_thread(const Callable & p_callable)  override;

	// DisplayServer -> FilamentRenderingServer API
	Error display_server_initialize();
	Error window_create(DisplayServer::WindowID p_window_id, void *p_native_window);
	void window_destroy(DisplayServer::WindowID p_window_id);

	static inline FilamentRenderingServer *filament_server_instance() {
		return Registerer::instance();
	}

	static inline filament::Engine *filamentEngine() {
		return FilamentRenderingServerBackend::filamentEngine();
	}

	inline FilamentRenderingServerBackend *backend() const {
		return static_cast<FilamentRenderingServerBackend *>(m_backend);
	}

private:
	class Registerer {
	public:
		explicit Registerer(FilamentRenderingServer *server);
		~Registerer();

		Registerer(const Registerer &other) = delete;
		Registerer &operator =(const Registerer &other) = delete;

		static inline FilamentRenderingServer *instance() {
			return m_instance;
		}

	private:
		static FilamentRenderingServer *m_instance;
	};

	Registerer m_registerer;
};

#endif

