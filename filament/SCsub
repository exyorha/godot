#!/usr/bin/env python

import subprocess

filament_version = "1.50.2"

Import("env")

filament_srcdir = "filament-%s" % filament_version

filament_builddir = "filament-%s" % env["platform"]

print("Godot-Filament integration build setup:")
print("  Source directory: %s" % filament_srcdir)
print("  Build directory:  %s" % filament_builddir)

if env["dev_build"]:
    filament_build_type = "RelWithDebInfo"
else:
    filament_build_type = "Release"

res = subprocess.run([
    "cmake",
    "-DCMAKE_C_COMPILER=%s" % env["CC"],
    "-DCMAKE_CXX_COMPILER=%s" % env["CXX"],
    "-DCMAKE_BUILD_TYPE=%s" % filament_build_type,
    "-DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE",
    "-DFILAMENT_SKIP_SAMPLES=TRUE",
    "-DFILAMENT_SKIP_SDL2=TRUE",
    "-S", filament_srcdir,
    "-B", filament_builddir
])
res.check_returncode()

buildcmd = [
    "cmake", "--build", filament_builddir,
    "--parallel=%d" % env.GetOption("num_jobs")
]

if env["verbose"]:
    buildcmd.append("--verbose")

res = subprocess.run(buildcmd)

res.check_returncode()

sources = [
    "filament_engine_object.cpp",
    "filament_object.cpp",
    "filament_object_manager.cpp",
    "filament_proxy_texture_object.cpp",
    "filament_rendering_server.cpp",
    "filament_rendering_server.h",
    "filament_rendering_server_backend.cpp",
    "filament_rendering_server_backend.h",
    "filament_texture_format.cpp",
    "filament_texture_object.cpp",
    "filament_texture_reference_object.cpp",
    "filament_window.cpp",
    "threaded_execution_queue.cpp"
]

env_filament = env.Clone()

env_filament.Prepend(CPPPATH=[
    "#filament/%s/filament/backend/include" % filament_srcdir,
    "#filament/%s/filament/include" % filament_srcdir,
    "#filament/%s/libs/utils/include" % filament_srcdir,
    "#filament/%s/libs/math/include" % filament_srcdir
])

lib = env_filament.add_library("filamentserver", sources)

env.Prepend(
    LIBPATH = [
        "#filament/%s/filament" % filament_builddir,
        "#filament/%s/filament/backend" % filament_builddir,
        "#filament/%s/libs/utils" % filament_builddir,
        "#filament/%s/libs/bluegl" % filament_builddir,
        "#filament/%s/libs/bluevk" % filament_builddir,
        "#filament/%s/libs/filaflat" % filament_builddir,
        "#filament/%s/libs/filabridge" % filament_builddir,
        "#filament/%s/libs/ibl" % filament_builddir,
        "#filament/%s/third_party/smol-v/tnt" % filament_builddir
    ],
    LIBS = [
        lib,
        "filament",
        "backend",
        "vkshaders",
        "utils",
        "bluegl",
        "bluevk",
        "filaflat",
        "filabridge",
        "ibl",
        "smol-v",
        "c++"
    ]
)
