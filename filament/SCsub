#!/usr/bin/env python

import subprocess

def build_filament_material(target, source, env):
    for index in range(len(source)):
        input_file = source[index]
        output_file = target[index]

        res = subprocess.run([
            env["FILAMENT_MATC"].get_abspath(),
            "-o", output_file,
            "-p", "all",
            "-a", "all",
            "-f", "header",
            input_file
        ])

        res.check_returncode()

filament_version = "1.50.2"

Import("env")

filament_srcdir = "filament-%s" % filament_version

filament_builddir = "filament-%s" % env["platform"]

print("Godot-Filament integration build setup:")
print("  Source directory: %s" % filament_srcdir)
print("  Build directory:  %s" % filament_builddir)

if env["dev_build"]:
    filament_build_type = "RelWithDebInfo"
else:
    filament_build_type = "Release"

res = subprocess.run([
    "cmake",
    "-DCMAKE_C_COMPILER=%s" % env["CC"],
    "-DCMAKE_CXX_COMPILER=%s" % env["CXX"],
    "-DCMAKE_BUILD_TYPE=%s" % filament_build_type,
    "-DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE",
    "-DFILAMENT_SKIP_SAMPLES=TRUE",
    "-DFILAMENT_SKIP_SDL2=TRUE",
    "-DFILAMENT_SUPPORTS_VULKAN=FALSE",
    "-S", filament_srcdir,
    "-B", filament_builddir
])
res.check_returncode()

buildcmd = [
    "cmake", "--build", filament_builddir,
    "--parallel=%d" % env.GetOption("num_jobs")
]

if env["verbose"]:
    buildcmd.append("--verbose")

res = subprocess.run(buildcmd)

res.check_returncode()

sources = [
    "filament_builtin_materials.cpp",
    "filament_camera.cpp",
    "filament_canvas.cpp",
    "filament_canvas_element.cpp",
    "filament_canvas_element_texture_rect.cpp",
    "filament_canvas_element_triangle_array.cpp",
    "filament_canvas_item.cpp",
    "filament_canvas_item_container.cpp",
    "filament_canvas_render_order_collector.cpp",
    "filament_canvas_view.cpp",
    "filament_controlled_object_reference.cpp",
    "filament_engine_object.cpp",
    "filament_entity_object.cpp",
    "filament_dirty_list.cpp",
    "filament_dirty_list_entry.cpp",
    "filament_instance.cpp",
    "filament_light_object.cpp",
    "filament_linked_list_entry.cpp",
    "filament_material_instance_source.cpp",
    "filament_material_object.cpp",
    "filament_material_property_bundle.cpp",
    "filament_math_adapters.cpp",
    "filament_mesh.cpp",
    "filament_mesh_surface.cpp",
    "filament_object.cpp",
    "filament_object_manager.cpp",
    "filament_proxy_texture_object.cpp",
    "filament_renderable_base.cpp",
    "filament_rendering_server.cpp",
    "filament_rendering_server.h",
    "filament_rendering_server_backend.cpp",
    "filament_rendering_server_backend.h",
    "filament_scenario_object.cpp",
    "filament_shader_object.cpp",
    "filament_skeleton_object.cpp",
    "filament_texture_format.cpp",
    "filament_texture_object.cpp",
    "filament_texture_reference_object.cpp",
    "filament_vertex_format.cpp",
    "filament_viewport_object.cpp",
    "filament_window.cpp",
    "register_filament_types.cpp",
    "threaded_execution_queue.cpp",
    "resources/filament_material.cpp",
    "resources/filament_uber_material.cpp"
]

env_filament = env.Clone()

env_filament.Prepend(CPPPATH=[
    "#filament/%s/filament/backend/include" % filament_srcdir,
    "#filament/%s/filament/include" % filament_srcdir,
    "#filament/%s/libs/utils/include" % filament_srcdir,
    "#filament/%s/libs/math/include" % filament_srcdir,
    "#filament/%s/libs/filabridge/include" % filament_srcdir,
    "#filament/%s/libs/geometry/include" % filament_srcdir,
    "#filament/%s/libs/uberz/include" % filament_srcdir,
    "#filament/%s/third_party/robin-map" % filament_srcdir
])

if env.editor_build:
    env_filament.Prepend(CPPPATH=[
        "#filament/shader_compiler/GLshader/include",
        "#filament/%s/libs/filamat/include" % filament_srcdir
    ])

    sources.extend([
        "shader_compiler/GLshader/src/definition.cpp",
        "shader_compiler/GLshader/src/preprocessor/classify.cpp",
        "shader_compiler/GLshader/src/preprocessor/control.cpp",
        "shader_compiler/GLshader/src/preprocessor/eval.cpp",
        "shader_compiler/GLshader/src/preprocessor/macro.cpp",
        "shader_compiler/GLshader/src/preprocessor/preprocessor.cpp",
        "shader_compiler/GLshader/src/preprocessor/skip.cpp",
        "shader_compiler/filamat_extra_enums.cpp",
        "shader_compiler/filament_material_parser.cpp",
        "shader_compiler/filament_uber_material_parser.cpp",
        "shader_compiler/filament_ubershader_variant.cpp",
        "shader_compiler/resource_importer_filament_material.cpp",
        "shader_compiler/resource_importer_filament_uber_material.cpp"
    ])

lib = env_filament.add_library("filamentserver", sources)

filament_group = [ lib ]

if env.editor_build:
    filament_group.extend([
        "filamat_combined",
        "shaders"
    ])

filament_group.extend([
    "filament",
    "backend",
    "vkshaders",
    "utils",
    "bluegl",
    "bluevk",
    "filaflat",
    "filabridge",
    "uberzlib",
    "geometry",
    "ibl",
    "smol-v",
    "c++"
])

env.Prepend(
    LIBPATH = [
        "#filament/%s/filament" % filament_builddir,
        "#filament/%s/filament/backend" % filament_builddir,
        "#filament/%s/libs/utils" % filament_builddir,
        "#filament/%s/libs/bluegl" % filament_builddir,
        "#filament/%s/libs/bluevk" % filament_builddir,
        "#filament/%s/libs/filaflat" % filament_builddir,
        "#filament/%s/libs/filabridge" % filament_builddir,
        "#filament/%s/libs/ibl" % filament_builddir,
        "#filament/%s/libs/geometry" % filament_builddir,
        "#filament/%s/third_party/smol-v/tnt" % filament_builddir,
        "#filament/%s/libs/filamat" % filament_builddir,
        "#filament/%s/libs/uberz" % filament_builddir,
        "#filament/%s/shaders" % filament_builddir
    ],
    LIBS = filament_group
)

env.Append(
    BUILDERS = {
        "FILAMENT_MATERIAL":
            env.Builder(
                action=env.Run(build_filament_material, 'Building Filament material: "$TARGET"'),
                suffix="mat.gen.h",
                src_suffix=".mat",
            ),
    },
    FILAMENT_MATC = Entry("#filament/%s/tools/matc/matc" % filament_builddir)
)

SConscript("materials/SCsub")
