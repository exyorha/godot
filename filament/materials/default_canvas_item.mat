material {
	name: "Default Canvas Item Material",
	shadingModel: unlit,
	parameters: [
		{ name: "defaultCanvasTexture", precision: high, type: sampler2d }
	],
	quality: high,
	requires: [ uv0, color ],
	blending: transparent,
	depthWrite: false,
	depthCulling: false,
	flipUV: false,
	culling: none
}

fragment {
	void material(inout MaterialInputs material) {
		prepareMaterial(material);

		/*
		 * Convert the input UV from pixels to normalized coordinates.
		 */
		float2 correctedUV = getUV0() / vec2(textureSize(materialParams_defaultCanvasTexture, 0));

		/*
		 * Sample, modulate, and convert to premultiplied alpha.
		 */
		vec4 textureValue = texture(materialParams_defaultCanvasTexture, correctedUV);
		textureValue *= getColor();

		textureValue.rgb *= textureValue.a;

		/*
		 * Pass on to Filament, including transparency.
		 */
		material.baseColor = textureValue;
	}
}
